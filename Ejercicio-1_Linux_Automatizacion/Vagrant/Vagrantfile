Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"
  config.vm.network "private_network", ip: "172.16.1.2"
  config.vm.network "forwarded_port", guest: 80, host: 8081 #localhost
  config.vm.network "forwarded_port", guest: 22, host: 2222 #ssh
  config.vm.network "forwarded_port", guest: 8080, host: 1234 #alternative port
  config.vm.network "forwarded_port", guest: 8000, host: 1256 #alternative port
  config.vm.network "forwarded_port", guest: 3306, host: 1260 #mysql
  config.vm.hostname = "bootcamp295"
  config.vm.synced_folder ".", "/syncd", disabled: false
  config.vm.disk :disk, size: "80GB", primary: true
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
    vb.cpus = "2"
    vb.name = "295devops_group5"
  end
  

  config.vm.provision "shell", inline: <<-SHELL
  #Declaración de variables
  DISTRO=$(lsb_release -ds)
  USERID=$(id -u)
  REPO="https://github.com/roxsross/bootcamp-devops-2023.git"
  FOLDER="bootcamp-devops-2023"
  RAMA="clase2-linux-bash"
  APP="app-295devops-travel"


  #Validation root user
  if [[ "${USERID}" -ne "0" ]]; then
  echo -e "\e[31;1;3mDebes ser usuario ROOT.\e[m"
  exit 1
  fi 
  
  #Paquetes para el servidor LAMP
  paquetes=(
    curl  
    git
    php
    libapache2-mod-php
    php-mysql
    php-mbstring
    php-zip
    php-gd
    php-json
    php-curl
    tree
  )
  
 servicios=(
  mariadb-server
  apache2
 )

  #Definición de colores
  LRED='\033[1;31m'
  LGREEN='\033[1;32m'
  LYELLOW='\033[1;33m'
  NC='\033[0m'
  

  InstalarPaquetes() {
    local paquetes=("$@")
    for paquete in "${paquetes[@]}"; do
      dpkg -s "$paquete" &> /dev/null
      if [ $? -eq 0 ]; then
        sleep 1
        echo -e "\n${LGREEN}$paquete is already installed${NC}"
      else
        apt install "$paquete" -y 
        if [ $? -ne 0 ]; then
          echo -e "\n${LRED} Error installing $paquete${NC}"
          exit 1
        fi
      fi
    done
  }
  
  ValidacionServicios() {
    local servicios=("$@")
    for servicio in "${servicios[@]}"; do
      
      apt install -y "$servicio"
      if [ $? -eq 0 ]; then
        systemctl start "$servicio"
        systemctl enable "$servicio"

        case $servicio in
          mariadb-server)
            echo -e "${LYELLOW} -------- erificando el estado del servicio de MARIADB -------- ${NC}"
            mysql --version
            if systemctl is-active --quiet mariadb; then
              echo -e "${LGREEN}MariaDB is running.${NC}"
            else
              echo -e "${LRED}MariaDB is not running. ${NC}"
            fi
            ;;
          apache2)
            echo -e "${LYELLOW} -------- Verificando el estado del servicio de APACHE -------- ${NC}"
            apache2 -v
            if systemctl is-active --quiet apache2; then
              echo -e "${LGREEN}Apache is running.${NC}"
            else
              echo -e "${LRED}Apache is not running. ${NC}"
            fi
            ;;
        esac
        
      else
          echo -e "${LRED}Error en la instalación del $servicio.${NC}"
      fi

    done
  }

  #Clonar repositorio
  ClonarRepo() {
    if [ -d "$FOLDER" ]; then
      echo -e "\n${LBLUE}La carpeta $FOLDER existe ...${NC}"
      cd $FOLDER
      git pull
    else
      git clone $REPO --single-branch --branch $RAMA
    fi
  }

  #Configuración de la base de datos
  ConfiguracionDB() {
    if systemctl is-active --quiet mariadb; then
      echo -e "${LGREEN}MariaDB is running.${NC}"
      if mysql -e "USE devopstravel;" 2>/dev/null; then
        echo -e "\n${LGREEN}La base de datos 'devopstravel' ya existe ...${NC}"
      else
        echo -e "\n${LBLUE}Configurando base de datos ...${NC}"
        mysql -e "
        CREATE DATABASE devopstravel;
        CREATE USER 'codeuser'@'localhost' IDENTIFIED BY 'codepass';
        GRANT ALL PRIVILEGES ON *.* TO 'codeuser'@'localhost';
        FLUSH PRIVILEGES;"
        mysql < $FOLDER/$APP/database/devopstravel.sql
      fi 
    else
      echo -e "${LRED}MariaDB is not running.${NC}"
    fi
  }

  #Function Stage1 Instalación de paquetes nuevos y validación de los servicios y paquetes instalados  
  Stage1() {

    echo -e "${LGREEN} -------------------- Actualizando paquetes existentes ----------------${NC}"
    sudo apt-get update -y

    echo -e "${LYELLOW} -------------------- Instalando nuevos paquetes ----------------${NC}"
    InstalarPaquetes "${paquetes[@]}"
    
    echo -e "${LGREEN} -------------------- Validacion de los servicios --------------------${NC}"
    ValidacionServicios "${servicios[@]}"
  }

  Stage2() {
    ClonarRepo
    ConfiguracionDB
    #ConfiguracionApache
  }

  ################################## STAGES ###########################################################  
  #Instalación
  Stage1

  #Build
  Stage2
  
  #Deploy
  #Stage3
  
  #Notification
  #Stage4
  
  SHELL
end